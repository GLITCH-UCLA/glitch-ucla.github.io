name: Deploy Django to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django
          # Install any other required dependencies from requirements.txt if you have one
          # pip install -r requirements.txt
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create build directory
        run: mkdir -p _site
      
      - name: Collect static files
        run: |
          # Create a temporary settings file for collectstatic
          cat > temp_settings.py << EOL
          import os
          from glitchweb.settings import *
          DEBUG = False
          STATIC_ROOT = os.path.join(BASE_DIR, '_site/static')
          ALLOWED_HOSTS = ['glitch-ucla.github.io', 'localhost']
          EOL
          
          # Collect static files
          python manage.py collectstatic --noinput --settings=temp_settings
          
      - name: Process Django templates into static HTML
        run: |
          # Create _site directory structure
          mkdir -p _site
          
          # Copy templates directory
          cp -r glitchwebapp/templates/* _site/
          
          # Make sure we have base template files available
          cp -n glitchwebapp/templates/base.html _site/ || true
          
          # Ensure index.html exists in the root
          if [ ! -f _site/index.html ]; then
            cp -f glitchwebapp/templates/index.html _site/index.html || cp -f index.html _site/index.html
          fi
          
          # Create static HTML files for each Django template
          # Replace Django template tags with static content
          find _site -type f -name "*.html" -exec sed -i 's/{% extends.*%}//g' {} \;
          find _site -type f -name "*.html" -exec sed -i 's/{% load.*%}//g' {} \;
          
          # Process block content - this is complex but helps preserve template inheritance
          for file in $(find _site -type f -name "*.html"); do
            if grep -q "{% block content %}" "$file"; then
              # Extract content from base.html
              base_content=$(grep -v "{% block content %}\|{% endblock %}" _site/base.html 2>/dev/null || echo "")
              # Replace block tags with actual content
              sed -i '/{% block content %}/d' "$file"
              sed -i '/{% endblock %}/d' "$file"
            fi
          done
          
          # Replace remaining block tags
          find _site -type f -name "*.html" -exec sed -i 's/{% block.*%}//g' {} \;
          find _site -type f -name "*.html" -exec sed -i 's/{% endblock.*%}//g' {} \;
          
          # Replace static and URL tags
          find _site -type f -name "*.html" -exec sed -i 's/{% static "\([^"]*\)" %}/static\/\1/g' {} \;
          find _site -type f -name "*.html" -exec sed -i 's/{% static \([^ ]*\) %}/static\/\1/g' {} \;
          find _site -type f -name "*.html" -exec sed -i 's/{% url "\([^"]*\)" %}/\1.html/g' {} \;
          find _site -type f -name "*.html" -exec sed -i 's/{% url \([^ ]*\) %}/\1.html/g' {} \;
          
          # Add a simple meta tag to the head of each file to help with rendering
          find _site -type f -name "*.html" -exec sed -i '/<head>/a <meta name="generator" content="Django Static Site Generator">' {} \;
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
